/*

   This is the code for IOT DisplayV2 made by team techiesms

   This code will help you to display multiple things on Multiple p4 displays


*/


#include "ESP32-HUB75-MatrixPanel-I2S-DMA.h"
#include <ArduinoJson.h>
#include <HTTPClient.h>


#include "WiFi.h"
#include <ESPmDNS.h>

#include <HTTPClient.h>
#include <WiFiClientSecure.h>

#include "JsonStreamingParser.h"  //https://github.com/squix78/json-streaming-parser
#include <YoutubeApi.h>  //https://github.com/witnessmenow/arduino-youtube-api

#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>


const char* pop = "abcd1234";           // Proof of possession - otherwise called a PIN - string provided by the device, entered by user in the phone app
const char* service_name = "PROV_123";  // Name of your device (the Espressif apps expects by default device name starting with "Prov_")
const char* service_key = NULL;         // Password used for SofAP method (NULL = no password needed)
bool reset_provisioned = false;         // When true the library will automatically delete previously provisioned data.
bool is_connected = 0;


AsyncWebServer server(80);

const char* PARAM_INPUT_1 = "input1";
const char* PARAM_INPUT_2 = "color";
const char* PARAM_INPUT_3 = "insta";
const char* color;
const char* insta;


//******************************************************************************************* HTML WEB PAGE

// HTML web page to handle 3 input fields (Custom Text, Its Color, Instagram Follower)
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html><head>
  <title>ESP Input Form</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  </head><body>
  <form action="/get">
   <label for="input1">Input text:</label><br>
  <input type="text" id="input1" name="input1" value=""><br>
    <label for="color">Choose a Color:</label>
    <input type="color" id="color" name="color"><br><br>
   <label for="insta">Instagram Followers:</label><br>
  <input type="text" id="insta" name="insta" value=""><br><br>
   <input type="submit" value="Submit">
  </form>
</body></html>)rawliteral";

void notFound(AsyncWebServerRequest* request) {
  request->send(404, "text/plain", "Not found");
}

//************************************************************ Credentials For YouTube
#define API_KEY "YOUR API KEY"
#define CHANNEL_ID "UC7raRsx4ojx3cyXT3x9-PuQ"

WiFiClientSecure secureClient;
WiFiClientSecure client;
YoutubeApi api(API_KEY, client);


//************************************************************ For Current Date & Time
const char* Hostname = "worldtimeapi.org";
String URI = "/api/timezone/asia/kolkata";
const uint16_t port = 80;


//************************************************************ Variables
int i;
int y;
int r, g, b;

long subs = 0;
unsigned long nextRunTime;
unsigned long timeBetweenRequests = 60000;

String DATE;
String Day;
String Date;
String Status;
String Time;
String Day_str = "";
String day_of_week;

String customdata = " ";
String inputParam;
String colordata = " ";
String inputParam2;
String inputMessage3 = " ";
String inputParam3;
String instaMessage;

bool instaconnect = 0;
bool inputvalue = 0;
bool ampm = 0;



//************************************************************ Display Config Declaration
#define double_buffer


#define PANEL_RES_X 64  // Number of pixels wide of each INDIVIDUAL panel module.
#define PANEL_RES_Y 32  // Number of pixels tall of each INDIVIDUAL panel module.
#define PANEL_CHAIN 5   // Total number of panels chained one to another


//MatrixPanel_I2S_DMA dma_display;
MatrixPanel_I2S_DMA* dma_display = nullptr;

uint16_t myBLACK = dma_display->color565(0, 0, 0);
uint16_t myWHITE = dma_display->color565(255, 255, 255);
uint16_t myRED = dma_display->color565(255, 0, 0);
uint16_t myGREEN = dma_display->color565(0, 255, 0);
uint16_t myBLUE = dma_display->color565(0, 0, 255);
uint16_t myTECHIESMS = dma_display->color565(25, 189, 255);

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.



//************************************************************ For WiFi Provisioning
void SysProvEvent(arduino_event_t* sys_event) {
  switch (sys_event->event_id) {
    case ARDUINO_EVENT_WIFI_STA_GOT_IP:
      dma_display->clearScreen();
      dma_display->setTextSize(4);
      dma_display->setCursor(0, 2);
      dma_display->setTextColor(myTECHIESMS);
      dma_display->print("Connected");
      Serial.print("\nConnected IP address : ");
      Serial.println(IPAddress(sys_event->event_info.got_ip.ip_info.ip.addr));


      //************************************************************ Started running MDNS so that we don't need
      if (!MDNS.begin("iotdisplay")) {
        Serial.println("Error setting up MDNS responder!");
        while (1) {
          delay(1000);
        }
      }
      Serial.println("mDNS responder started");
      is_connected = 1;
      break;
    case ARDUINO_EVENT_WIFI_STA_DISCONNECTED:
      Serial.println("\nDisconnected. Connecting to the AP again... ");
      Credential_Reset();
      break;
    case ARDUINO_EVENT_PROV_START:
      Serial.println("\nProvisioning started\nGive Credentials of your access point using smartphone app");
      break;
    case ARDUINO_EVENT_PROV_CRED_RECV:
      {
        Serial.println("\nReceived Wi-Fi credentials");
        Serial.print("\tSSID : ");
        Serial.println((const char*)sys_event->event_info.prov_cred_recv.ssid);
        Serial.print("\tPassword : ");
        Serial.println((char const*)sys_event->event_info.prov_cred_recv.password);
        break;
      }
    case ARDUINO_EVENT_PROV_CRED_FAIL:
      {
        Serial.println("\nProvisioning failed!\nPlease reset to factory and retry provisioning\n");
        if (sys_event->event_info.prov_fail_reason == WIFI_PROV_STA_AUTH_ERROR)
          Serial.println("\nWi-Fi AP password incorrect");
        else
          Serial.println("\nWi-Fi AP not found....Add API \" nvs_flash_erase() \" before beginProvision()");
        break;
      }
    case ARDUINO_EVENT_PROV_CRED_SUCCESS:
      Serial.println("\nProvisioning Successful");
      dma_display->clearScreen();
      dma_display->setTextSize(4);
      dma_display->setCursor(0, 2);
      dma_display->setTextColor(myTECHIESMS);
      dma_display->print("Wifi Successful");
      delay(2000);
      break;
    case ARDUINO_EVENT_PROV_END:
      Serial.println("\nProvisioning Ends");
      ESP.restart();
      is_connected = 1;
      break;
    default:
      break;
  }
}
//******************************************************************************************************************************* Instagram LOGO
uint16_t static Insta_logo[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0010 (16) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0020 (32) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0820, 0x2967, 0x31EB, 0x424D, 0x3A2D, 0x3A2D, 0x3A2D, 0x3A2D, 0x3A2D, 0x3A2D, 0x422D,  // 0x0030 (48) pixels
  0x420C, 0x420C, 0x420C, 0x420C, 0x420C, 0x49EC, 0x4A0D, 0x41CB, 0x3188, 0x08A0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0040 (64) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x5B53, 0x63FE, 0x4B5C, 0x4B5C, 0x533B, 0x533B, 0x533B, 0x531B, 0x5B1B, 0x62FA, 0x62DA, 0x6ADA,  // 0x0050 (80) pixels
  0x72BA, 0x72BA, 0x7A9A, 0x7A7A, 0x8259, 0x8259, 0x8239, 0x8A1A, 0x89FA, 0xA27B, 0x8AD4, 0x10C1, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0060 (96) pixels
  0x0000, 0x0000, 0x0000, 0x7C1B, 0x52DB, 0x52B9, 0x52B9, 0x52B9, 0x5AB9, 0x5AB9, 0x5A98, 0x6298, 0x6A78, 0x7278, 0x7258, 0x7A57,  // 0x0070 (112) pixels
  0x7A37, 0x8237, 0x8217, 0x89F7, 0x89D7, 0x91D7, 0x91B7, 0x91B7, 0x91B7, 0x91B7, 0x9198, 0xB2FB, 0x10C1, 0x0000, 0x0000, 0x0000,  // 0x0080 (128) pixels
  0x0000, 0x0000, 0x6B35, 0x5A5A, 0x5A78, 0x5A78, 0x6278, 0x6258, 0x6258, 0x6A38, 0x7238, 0x7A38, 0x8217, 0x81F7, 0x89F7, 0x91D7,  // 0x0090 (144) pixels
  0x91B7, 0x99B7, 0x99B6, 0xA1B7, 0xA196, 0xA196, 0x9996, 0x99B6, 0x99B6, 0x99B6, 0x99B7, 0x9997, 0xA298, 0x0000, 0x0000, 0x0000,  // 0x00A0 (160) pixels
  0x0000, 0x2144, 0x6A5A, 0x6218, 0x6A17, 0x69F7, 0x69F7, 0x71B7, 0x8A59, 0x6A11, 0x51CC, 0x3929, 0x49AA, 0x49AA, 0x49CA, 0x51CA,  // 0x00B0 (176) pixels
  0x51AA, 0x51AA, 0x51AA, 0x4128, 0x61CC, 0x79EF, 0xB236, 0xA976, 0xA195, 0xA1B6, 0xA1B6, 0xA1B6, 0xB1B8, 0x4189, 0x0000, 0x0000,  // 0x00C0 (192) pixels
  0x0000, 0x41AB, 0x71F9, 0x69D7, 0x71D6, 0x71D6, 0x79B7, 0x8313, 0x0060, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x00D0 (208) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0040, 0x82D0, 0xC1B7, 0xA995, 0xA995, 0xA996, 0xB197, 0x8211, 0x0000, 0x0000,  // 0x00E0 (224) pixels
  0x0000, 0x59F0, 0x71D7, 0x71D6, 0x79D6, 0x81B6, 0x7AD0, 0x0000, 0x10C2, 0x722E, 0x9232, 0xA253, 0xAA54, 0xB254, 0xB234, 0xB234,  // 0x00F0 (240) pixels
  0xB234, 0xBA34, 0xBA54, 0xA9F2, 0xAA32, 0x822F, 0x2145, 0x0000, 0x6AAD, 0xC175, 0xB195, 0xB195, 0xB195, 0xA234, 0x0000, 0x0000,  // 0x0100 (256) pixels
  0x0000, 0x7272, 0x81D6, 0x81D5, 0x81B5, 0x9AB6, 0x0000, 0x10C2, 0xBA96, 0xA193, 0xA993, 0xA972, 0xB192, 0xB192, 0xB192, 0xB992,  // 0x0110 (272) pixels
  0xB972, 0xB972, 0xB952, 0xB952, 0xC133, 0xC953, 0xD1D5, 0x3186, 0x0000, 0xA232, 0xB974, 0xB994, 0xB995, 0xB214, 0x0000, 0x0000,  // 0x0120 (288) pixels
  0x0000, 0x7A72, 0x81D5, 0x81D4, 0x91B4, 0x61EC, 0x0000, 0xA2F3, 0xA172, 0xA992, 0xB192, 0xB192, 0xB992, 0xB971, 0xC171, 0xC171,  // 0x0130 (304) pixels
  0xC171, 0xC171, 0xC191, 0xC972, 0x4A09, 0x0902, 0xB9D1, 0xC233, 0x0000, 0x4167, 0xC974, 0xB994, 0xB975, 0xB214, 0x0000, 0x0000,  // 0x0140 (320) pixels
  0x0000, 0x7A72, 0x89B5, 0x91D3, 0xA1B4, 0x3146, 0x0020, 0xB1F3, 0xB191, 0xB192, 0xB991, 0xB991, 0xC151, 0xDAB4, 0x9A6E, 0x92AE,  // 0x0150 (336) pixels
  0x8A0D, 0xCA52, 0xD130, 0xD9D2, 0x00A0, 0x0000, 0xA24F, 0xD932, 0x10E2, 0x1103, 0xD174, 0xC173, 0xC174, 0xB214, 0x0000, 0x0000,  // 0x0160 (352) pixels
  0x0000, 0x7A51, 0x91B4, 0x99B3, 0xA9B3, 0x18C3, 0x0081, 0xC1B2, 0xB991, 0xB991, 0xB970, 0xD191, 0x92EF, 0x0020, 0x0000, 0x0000,  // 0x0170 (368) pixels
  0x0000, 0x0000, 0x72AC, 0xE190, 0xC231, 0xB2B0, 0xD171, 0xD151, 0x3125, 0x0040, 0xD9D4, 0xC173, 0xC973, 0xBA13, 0x0000, 0x0000,  // 0x0180 (384) pixels
  0x0000, 0x8251, 0x99B3, 0xA192, 0xB192, 0x1903, 0x2144, 0xC991, 0xB990, 0xC170, 0xD150, 0x7AAD, 0x0000, 0x2145, 0xA22D, 0xC22F,  // 0x0190 (400) pixels
  0xAA4E, 0x41E7, 0x0000, 0x5229, 0xE14F, 0xD150, 0xC970, 0xD971, 0x3946, 0x0000, 0xE235, 0xC952, 0xC973, 0xBA13, 0x0000, 0x0000,  // 0x01A0 (416) pixels
  0x0000, 0x8A50, 0xA992, 0xA991, 0xB992, 0x1924, 0x1903, 0xD170, 0xC16F, 0xC96F, 0xC24F, 0x0000, 0x3186, 0xE9F0, 0xD92E, 0xD14E,  // 0x01B0 (432) pixels
  0xD94E, 0xF190, 0x5209, 0x0000, 0xC331, 0xD94F, 0xD170, 0xE170, 0x3926, 0x0000, 0xD191, 0xC972, 0xC973, 0xB9F3, 0x0000, 0x0000,  // 0x01C0 (448) pixels
  0x0000, 0x8A50, 0xB192, 0xB190, 0xC990, 0x1944, 0x18E3, 0xD9AE, 0xC9AD, 0xD9AE, 0x5967, 0x0000, 0xCA6F, 0xD92D, 0xD96E, 0xD94E,  // 0x01D0 (464) pixels
  0xD94E, 0xD92D, 0xFA92, 0x0000, 0x3105, 0xE96F, 0xD16F, 0xE170, 0x3905, 0x0080, 0xD190, 0xD171, 0xD152, 0xC1F2, 0x0000, 0x0000,  // 0x01E0 (480) pixels
  0x0000, 0x924F, 0xB9B0, 0xB9EE, 0xD9EE, 0x1944, 0x18E3, 0xEA0D, 0xDA0C, 0xE9EB, 0x5249, 0x0060, 0xF22D, 0xD9AC, 0xE1AD, 0xD98D,  // 0x01F0 (496) pixels
  0xD96D, 0xD94E, 0xF12D, 0x1903, 0x0081, 0xF16F, 0xD96F, 0xE96F, 0x3905, 0x0060, 0xD190, 0xD171, 0xD152, 0xC1F2, 0x0000, 0x0000,  // 0x0200 (512) pixels
  0x0000, 0x9A6E, 0xCA0E, 0xCA2D, 0xE24D, 0x1944, 0x18E3, 0xF26B, 0xDA4A, 0xF24A, 0x5A49, 0x0000, 0xF28B, 0xE20A, 0xE20B, 0xE1EB,  // 0x0210 (528) pixels
  0xE1AC, 0xE16C, 0xF14D, 0x10E3, 0x10E3, 0xF14E, 0xD96E, 0xE96F, 0x3905, 0x0060, 0xD98F, 0xD170, 0xD171, 0xC1F2, 0x0000, 0x0000,  // 0x0220 (544) pixels
  0x0000, 0xA28D, 0xD24C, 0xD28B, 0xF28B, 0x1924, 0x18E3, 0xFAA9, 0xE2A9, 0xF2A8, 0xA32C, 0x0000, 0xC36D, 0xF228, 0xEA49, 0xEA2A,  // 0x0230 (560) pixels
  0xEA0A, 0xE98A, 0xEB30, 0x0000, 0x61C9, 0xE94E, 0xD96E, 0xE96F, 0x3905, 0x0080, 0xD96F, 0xD970, 0xD971, 0xC1F1, 0x0000, 0x0000,  // 0x0240 (576) pixels
  0x0000, 0xAACC, 0xDAAB, 0xDACA, 0xFAE9, 0x1924, 0x1904, 0xFB08, 0xEB08, 0xEAE7, 0xFBCB, 0x0062, 0x0000, 0xEBCD, 0xFA67, 0xFA68,  // 0x0250 (592) pixels
  0xFA08, 0xFB4E, 0x08C2, 0x0000, 0xE26F, 0xE14D, 0xD96D, 0xE94E, 0x3925, 0x0000, 0xE9F0, 0xD970, 0xD970, 0xC1F1, 0x0000, 0x0000,  // 0x0260 (608) pixels
  0x0000, 0xAAEB, 0xE2E9, 0xE309, 0xFB28, 0x18E3, 0x10E3, 0xFB47, 0xF347, 0xF347, 0xFB06, 0xE3EC, 0x0000, 0x0000, 0x5228, 0x5944,  // 0x0270 (624) pixels
  0x5A28, 0x0000, 0x0000, 0xC36F, 0xF18B, 0xE16C, 0xD94D, 0xF14E, 0x4166, 0x0060, 0xF211, 0xD16F, 0xD970, 0xC9F1, 0x0000, 0x0000,  // 0x0280 (640) pixels
  0x0000, 0xB30A, 0xEB28, 0xEB48, 0xFB67, 0x2104, 0x0062, 0xFBA7, 0xF386, 0xF386, 0xF386, 0xFB45, 0xFC2B, 0x5249, 0x0021, 0x0000,  // 0x0290 (656) pixels
  0x0000, 0x4208, 0xE38D, 0xFA08, 0xEA0A, 0xE1CB, 0xE16C, 0xF14D, 0x2924, 0x00A1, 0xF18F, 0xD96F, 0xD970, 0xC9F0, 0x0000, 0x0000,  // 0x02A0 (672) pixels
  0x0000, 0xB34A, 0xF367, 0xEB87, 0xFBA6, 0x6A88, 0x0000, 0xFBE8, 0xFBC5, 0xFBC5, 0xFBC5, 0xFBA5, 0xFB85, 0xFB65, 0xFBE8, 0xEB88,  // 0x02B0 (688) pixels
  0xFB89, 0xFAE7, 0xF287, 0xEA88, 0xEA49, 0xEA0A, 0xE1AB, 0xF16D, 0x08E3, 0x1903, 0xF16F, 0xD96F, 0xD970, 0xC9F0, 0x0000, 0x0000,  // 0x02C0 (704) pixels
  0x0000, 0xBB6A, 0xF3A6, 0xF3C6, 0xFBE5, 0xBBCA, 0x0000, 0x9B08, 0xFC04, 0xFC05, 0xFC05, 0xFC05, 0xFBE5, 0xFBC5, 0xFB85, 0xFB65,  // 0x02D0 (720) pixels
  0xFB25, 0xF306, 0xF2E7, 0xF2A7, 0xEA88, 0xEA29, 0xF1A9, 0xCAEE, 0x0000, 0x71C9, 0xE94E, 0xD96F, 0xD96F, 0xC9F0, 0x0000, 0x0000,  // 0x02E0 (736) pixels
  0x0000, 0xAB07, 0xFC06, 0xF426, 0xFC26, 0xFC66, 0x0063, 0x0000, 0xDCAC, 0xFCC6, 0xFCC6, 0xFCA6, 0xFCA6, 0xFC86, 0xFC25, 0xFBE5,  // 0x02F0 (752) pixels
  0xFBA5, 0xFB65, 0xFB26, 0xFAE7, 0xFAA8, 0xFA28, 0xF38F, 0x0061, 0x0040, 0xFA91, 0xD94E, 0xD96F, 0xD96F, 0xCA10, 0x0000, 0x0000,  // 0x0300 (768) pixels
  0x0000, 0x9B28, 0xFC66, 0xF466, 0xFC86, 0xFCC6, 0xFD4B, 0x0001, 0x0000, 0x2965, 0x6A65, 0x9348, 0x82C5, 0x8AC5, 0x92E6, 0x8AC6,  // 0x0310 (784) pixels
  0x8A86, 0x8A66, 0x81E5, 0x9288, 0x71E7, 0x5249, 0x0000, 0x0000, 0xCAEF, 0xE12D, 0xD96E, 0xD96F, 0xD96F, 0xC250, 0x0000, 0x0000,  // 0x0320 (800) pixels
  0x0000, 0x5A06, 0xFCC7, 0xFCC7, 0xFD07, 0xFD48, 0xFD47, 0xFE2C, 0x6288, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0330 (816) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0082, 0x6289, 0xF34E, 0xE98B, 0xE18D, 0xD96E, 0xD96F, 0xE170, 0x89CC, 0x0000, 0x0000,  // 0x0340 (832) pixels
  0x0000, 0x0001, 0xFDCB, 0xFD48, 0xFD69, 0xFDA9, 0xFDCA, 0xFDEA, 0xFE2A, 0xFE4B, 0xF5CC, 0xE58C, 0xC468, 0xD4EB, 0xD4CA, 0xD4AA,  // 0x0350 (848) pixels
  0xCC6A, 0xCC29, 0xC388, 0xE40B, 0xEBCA, 0xFB8A, 0xFA68, 0xEA29, 0xE20B, 0xE1AC, 0xD94E, 0xD96F, 0xF191, 0x2965, 0x0000, 0x0000,  // 0x0360 (864) pixels
  0x0000, 0x0000, 0x6AE9, 0xFE4A, 0xFDCA, 0xFE0B, 0xFE2B, 0xFE2C, 0xFE4C, 0xFE4C, 0xFE6C, 0xFE4C, 0xFE6C, 0xFE2B, 0xFE0B, 0xFDCA,  // 0x0370 (880) pixels
  0xFD8A, 0xFD29, 0xFCC9, 0xFC48, 0xFBC8, 0xF348, 0xEAC8, 0xEA69, 0xE20B, 0xE1AC, 0xD96E, 0xE92F, 0x9A6E, 0x0000, 0x0000, 0x0000,  // 0x0380 (896) pixels
  0x0000, 0x0000, 0x0000, 0x940C, 0xFF0E, 0xFE8D, 0xFE8D, 0xFE8E, 0xFE8E, 0xFE8E, 0xFEAE, 0xFE8E, 0xFE8E, 0xFE6D, 0xFE4D, 0xFE0C,  // 0x0390 (912) pixels
  0xFDCB, 0xFD8B, 0xFD2A, 0xFCC9, 0xFC49, 0xF3A9, 0xF329, 0xEA89, 0xEA0A, 0xE9CC, 0xF14F, 0xBB11, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x03A0 (928) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x39C7, 0xB4EC, 0xFF11, 0xFFB2, 0xFF91, 0xFF91, 0xFF91, 0xFF91, 0xFF91, 0xFF70, 0xFF4F, 0xFF0E,  // 0x03B0 (944) pixels
  0xFECE, 0xFE6D, 0xFE2B, 0xFD8B, 0xFD0A, 0xFC6A, 0xFBC9, 0xFB4B, 0xF2CD, 0xBA4C, 0x5209, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x03C0 (960) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0042, 0x10A4, 0x10A4, 0x10A4, 0x10A4, 0x10A4, 0x10A4, 0x10C4,  // 0x03D0 (976) pixels
  0x10C4, 0x10C4, 0x10C4, 0x10E4, 0x10E4, 0x1104, 0x08E4, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x03E0 (992) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x03F0 (1008) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0400 (1024) pixels
};

void drawInsta(int x, int y) {
  int counter = 0;
  for (int yy = 0; yy < 32; yy++) {
    for (int xx = 0; xx < 32; xx++) {
      dma_display->drawPixel(xx + x, yy + y, Insta_logo[counter]);
      counter++;
    }
  }
}
//******************************************************************************************************************************************************** YouTube Logo
uint16_t static Youtube[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0010 (16) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0020 (32) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0030 (48) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0040 (64) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0050 (80) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0060 (96) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0070 (112) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0080 (128) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0041, 0x2082,  // 0x0090 (144) pixels
  0x3861, 0x4861, 0x5061, 0x6061, 0x7061, 0x7882, 0x8882, 0x9082, 0x9882, 0xA062, 0xA081, 0xA082, 0xA082, 0xA081, 0xA082, 0x9882,  // 0x00A0 (160) pixels
  0x9082, 0x9082, 0x8082, 0x7882, 0x6862, 0x5882, 0x4861, 0x4061, 0x3082, 0x1061, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x00B0 (176) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x00C0 (192) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x00D0 (208) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x00E0 (224) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x00F0 (240) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0100 (256) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0110 (272) pixels
  0x1061, 0xA082, 0xE841, 0xF841, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0120 (288) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0130 (304) pixels
  0xF820, 0xF841, 0xC861, 0x5061, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0140 (320) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0150 (336) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0160 (352) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0170 (368) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x39E7, 0x7C10, 0x73AE, 0x8430, 0x2124, 0x0000, 0x0000, 0x0000,  // 0x0180 (384) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0190 (400) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5082, 0xF820, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x01A0 (416) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x01B0 (432) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xD082, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x01C0 (448) pixels
  0x0000, 0x52AA, 0x8C51, 0x8430, 0x9CD3, 0x4A49, 0x0000, 0x0000, 0x0000, 0x0000, 0x0861, 0x9CD3, 0x8C71, 0x9492, 0x7BEF, 0x0000,  // 0x01D0 (464) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x01E0 (480) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2104, 0x9CD3, 0x8C51, 0x8C51, 0x8430, 0x8410, 0x8410, 0x8410, 0x8C51, 0x8C51, 0x8C71,  // 0x01F0 (496) pixels
  0x8431, 0x8430, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xA534, 0xFFFF,  // 0x0200 (512) pixels
  0xFFFF, 0xFFFF, 0x6B4D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0210 (528) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2061, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0220 (544) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0230 (560) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0240 (576) pixels
  0xF800, 0xA882, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0250 (592) pixels
  0x6B4D, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0260 (608) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x630C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0270 (624) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0280 (640) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0xAD55, 0xFFFF, 0xFFFF, 0xFFFF, 0x5ACB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0290 (656) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x02A0 (672) pixels
  0xC061, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x02B0 (688) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x02C0 (704) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x1061, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A2, 0xFFFF, 0xFFFF,  // 0x02D0 (720) pixels
  0xFFFF, 0xFFDF, 0x0000, 0x0000, 0x0000, 0x0000, 0xAD75, 0xFFFF, 0xFFFF, 0xFFFF, 0x630C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x02E0 (736) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x02F0 (752) pixels
  0x0000, 0x5AEB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,  // 0x0300 (768) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xAD75, 0xFFFF, 0xFFFF, 0xFFFF, 0x5ACB, 0x0000,  // 0x0310 (784) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0320 (800) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0xF841, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0330 (816) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0340 (832) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x6861, 0x0000,  // 0x0350 (848) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0x1082, 0x0000, 0x0000, 0x0000, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0360 (864) pixels
  0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0370 (880) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x52AA, 0xFFFF, 0xEF5D, 0xE73C, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0380 (896) pixels
  0xDEFB, 0xEF5D, 0xFFDF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0390 (912) pixels
  0xAD75, 0xFFFF, 0xFFFF, 0xFFFF, 0x52AB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x03A0 (928) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1061, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x03B0 (944) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x03C0 (960) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x03D0 (976) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xA061, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9492, 0xFFFF, 0xFFFF, 0xFFFF, 0x5ACB, 0x0000,  // 0x03E0 (992) pixels
  0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x03F0 (1008) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0400 (1024) pixels
  0x0000, 0x2124, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0410 (1040) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9CD3, 0xFFFF, 0xFFFF, 0xFFFF, 0x5AEB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0420 (1056) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0430 (1072) pixels
  0x0000, 0x4841, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0440 (1088) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0450 (1104) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xD061, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0460 (1120) pixels
  0x39C7, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3, 0x0000, 0x0000, 0x4208, 0xFFFF, 0xFFFF, 0xFFFF, 0xA513, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0470 (1136) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0480 (1152) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2945, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0490 (1168) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x94B2, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x04A0 (1184) pixels
  0x5AEB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x04B0 (1200) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6841, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x04C0 (1216) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x04D0 (1232) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x04E0 (1248) pixels
  0xF861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x8430, 0xFFFF, 0xFFFF,  // 0x04F0 (1264) pixels
  0xFFFF, 0x4228, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0500 (1280) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2945, 0xFFFF, 0xFFFF,  // 0x0510 (1296) pixels
  0xFFFF, 0xF79E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0520 (1312) pixels
  0x0000, 0x0000, 0x94B3, 0xFFFF, 0xFFFF, 0xFFFF, 0x5AEB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0530 (1328) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8081, 0xF800, 0xF800,  // 0x0540 (1344) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFA08,  // 0x0550 (1360) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0560 (1376) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF820, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xCE79, 0xFFFF, 0xFFFF,  // 0x0570 (1392) pixels
  0xFFFF, 0x0000, 0x0000, 0xD69A, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x4A69, 0xDEDB, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D,  // 0x0580 (1408) pixels
  0x7BCF, 0x0000, 0x0000, 0x0000, 0x0000, 0x632C, 0xCE79, 0xBDF7, 0xCE59, 0x6B4D, 0x0000, 0x0000, 0x52AA, 0xCE59, 0xBDF7, 0xCE59,  // 0x0590 (1424) pixels
  0x8C71, 0x0000, 0x0000, 0x3186, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x0000, 0x0000, 0x3186, 0xD69A, 0xBDF8, 0xCE59, 0xB596, 0x0000,  // 0x05A0 (1440) pixels
  0x0000, 0x10A2, 0xD69A, 0xBDF7, 0xC638, 0xBDF7, 0x0000, 0x0000, 0xA514, 0xFFFF, 0xFFFF, 0xFFFF, 0x52AA, 0x0000, 0xC638, 0xFFFF,  // 0x05B0 (1456) pixels
  0xFFFF, 0xEF5D, 0x2104, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x630C, 0xE73C, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDB, 0x630C, 0x0000,  // 0x05C0 (1472) pixels
  0x0000, 0x0000, 0x0000, 0xA061, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x05D0 (1488) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFFFF, 0xFE79, 0xF882, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x05E0 (1504) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x0041, 0x0000, 0x0000,  // 0x05F0 (1520) pixels
  0x0000, 0x0000, 0x0000, 0x73AE, 0xFFFF, 0xFFFF, 0xFFFF, 0x10A2, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDD7, 0x0000, 0x0000, 0x8C51,  // 0x0600 (1536) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD69A, 0x0000, 0x0000, 0x0000, 0x8C71, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CF3,  // 0x0610 (1552) pixels
  0x0000, 0x0000, 0x8410, 0xFFFF, 0xFFFF, 0xFFFF, 0xC618, 0x0000, 0x0000, 0x39E7, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000,  // 0x0620 (1568) pixels
  0x4A69, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0000, 0x0000, 0x2945, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xAD55, 0xFFFF,  // 0x0630 (1584) pixels
  0xFFFF, 0xFFFF, 0x5AEB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xA534, 0xFFFF, 0xFFFF,  // 0x0640 (1600) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3, 0x0000, 0x0000, 0x0000, 0xB062, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0650 (1616) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFCD3, 0xF800,  // 0x0660 (1632) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0670 (1648) pixels
  0xF800, 0xF800, 0xF800, 0x0061, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A2, 0xFFFF, 0xFFFF, 0xFFFF, 0x5AEB, 0x0020, 0xFFFF,  // 0x0680 (1664) pixels
  0xFFFF, 0xFFFF, 0x5AEB, 0x0000, 0x2124, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x52AA, 0x0000,  // 0x0690 (1680) pixels
  0x0000, 0x8C51, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3, 0x0000, 0x0000, 0x7BCF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDD7, 0x0000, 0x0000, 0x39E7,  // 0x06A0 (1696) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x4228, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x0000, 0x0000, 0x2104, 0xFFFF, 0xFFFF,  // 0x06B0 (1712) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xAD55, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6B4D,  // 0x06C0 (1728) pixels
  0x0000, 0x0000, 0x3186, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0021, 0x0000, 0x0000, 0xC062,  // 0x06D0 (1744) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x06E0 (1760) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFB2C, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x06F0 (1776) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x1061, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0700 (1792) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0x94B2, 0x4A69, 0xFFFF, 0xFFFF, 0xFFFF, 0x0861, 0x0000, 0xA534, 0xFFFF, 0xFFFF, 0xFFFF, 0x8430, 0x0000,  // 0x0710 (1808) pixels
  0x4229, 0xFFFF, 0xFFFF, 0xFFFF, 0xD6BA, 0x0000, 0x0000, 0x8C50, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3, 0x0000, 0x0000, 0x7BCF, 0xFFFF,  // 0x0720 (1824) pixels
  0xFFFF, 0xFFFF, 0xBDF7, 0x0000, 0x0000, 0x4208, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x4228, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0730 (1840) pixels
  0xEF7D, 0x0000, 0x0000, 0x2124, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xAD55, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0841,  // 0x0740 (1856) pixels
  0x0000, 0xDEFB, 0xFFFF, 0xFFFF, 0xFFFF, 0xB596, 0x0000, 0x0000, 0xB596, 0xFFFF, 0xFFFF, 0xFFFF, 0x2124, 0x0000, 0x73AE, 0xFFFF,  // 0x0750 (1872) pixels
  0xFFFF, 0xFFFF, 0x6B4D, 0x0000, 0x0000, 0xC861, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0760 (1888) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF5C, 0xF965, 0xF800,  // 0x0770 (1904) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x1861,  // 0x0780 (1920) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xA534, 0xFFFF, 0xFFFF, 0xC618, 0x7BCF, 0xFFFF, 0xFFFF, 0xF79E, 0x0000, 0x0000,  // 0x0790 (1936) pixels
  0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0x2124, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x9CD3, 0xFFFF, 0xFFFF,  // 0x07A0 (1952) pixels
  0xFFFF, 0xA534, 0x0000, 0x0000, 0x7BCF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0x0000, 0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D,  // 0x07B0 (1968) pixels
  0x0000, 0x0000, 0x39E7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0x0000, 0x0000, 0x18E3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,  // 0x07C0 (1984) pixels
  0x9CD3, 0xFFFF, 0xFFFF, 0xFFFF, 0x7BEF, 0x0000, 0x0000, 0x5ACB, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0000, 0x0000, 0xF7BE, 0xFFFF,  // 0x07D0 (2000) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x1082, 0xFFFF, 0xFFFF, 0xFFFF, 0xB596, 0x0000, 0x0000, 0xC861, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x07E0 (2016) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x07F0 (2032) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFE18, 0xF8C3, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0800 (2048) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x1861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x528A, 0xFFFF, 0xFFFF, 0xE73D,  // 0x0810 (2064) pixels
  0xCE59, 0xFFFF, 0xFFFF, 0x9CD3, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0841, 0x0000, 0x0000, 0xF79E, 0xFFFF, 0xFFFF,  // 0x0820 (2080) pixels
  0xFFFF, 0x2965, 0x0000, 0x9492, 0xFFFF, 0xFFFF, 0xFFFF, 0xA514, 0x0000, 0x0000, 0x7BCF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC618, 0x0000,  // 0x0830 (2096) pixels
  0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, 0x0000, 0x0000, 0x39E7, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0000, 0x0000, 0x2104,  // 0x0840 (2112) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x9492, 0xFFFF, 0xFFFF, 0xFFFF, 0x5AEB, 0x0000, 0x0000, 0x39C7, 0xFFFF, 0xFFFF,  // 0x0850 (2128) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0000, 0x0000, 0x0841, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x0000,  // 0x0860 (2144) pixels
  0x0000, 0xD061, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0870 (2160) pixels
  0xF800, 0xF800, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFB2C, 0xF800, 0xF800, 0xF800,  // 0x0880 (2176) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x1861, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0890 (2192) pixels
  0x0000, 0x0000, 0x0020, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x4208, 0x0000, 0x0861, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x08A0 (2208) pixels
  0x0841, 0x0000, 0x0000, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0x4208, 0x0000, 0x9492, 0xFFFF, 0xFFFF, 0xFFFF, 0xA534, 0x0000, 0x0000,  // 0x08B0 (2224) pixels
  0x7BCF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0x0000, 0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x0000, 0x0000, 0x39E7, 0xFFFF,  // 0x08C0 (2240) pixels
  0xFFFF, 0xFFFF, 0xFFDF, 0x0000, 0x0000, 0x2104, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x94B2, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x08D0 (2256) pixels
  0x5AEB, 0x0000, 0x0000, 0x2104, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7E, 0x0000, 0x0000,  // 0x08E0 (2272) pixels
  0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xD6BA, 0x0000, 0x0000, 0xC861, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x08F0 (2288) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0900 (2304) pixels
  0xFCB2, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0910 (2320) pixels
  0xF800, 0x1861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xE73C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,  // 0x0920 (2336) pixels
  0x0000, 0x18E3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0020, 0x0000, 0x0000, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0x4208, 0x0000, 0x8C71,  // 0x0930 (2352) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xA514, 0x0000, 0x0000, 0x7BEF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC618, 0x0000, 0x0000, 0x39C7, 0xFFFF, 0xFFFF,  // 0x0940 (2368) pixels
  0xFFFF, 0xE73C, 0x0000, 0x0000, 0x4A49, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0x0000, 0x0000, 0x2945, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0950 (2384) pixels
  0x0000, 0x0000, 0xA534, 0xFFFF, 0xFFFF, 0xFFFF, 0x5AEB, 0x0000, 0x0000, 0x18C3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x18E3,  // 0x0960 (2400) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0x0000, 0x0000, 0x0020, 0xFFFF, 0xFFFF, 0xFFFF, 0xD6BA, 0x0000, 0x0000, 0xC061, 0xF800, 0xF800,  // 0x0970 (2416) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFFFF,  // 0x0980 (2432) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFE59, 0xF861, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0990 (2448) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x1061, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8C51,  // 0x09A0 (2464) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0x0000, 0x0000, 0x18C3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF,  // 0x09B0 (2480) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0x39E7, 0x0000, 0x8C51, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3, 0x0000, 0x0000, 0x7BCF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x09C0 (2496) pixels
  0xBDF7, 0x0000, 0x0000, 0x39E7, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x4A69, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x0000,  // 0x09D0 (2512) pixels
  0x0000, 0x2945, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xAD75, 0xFFFF, 0xFFFF, 0xFFFF, 0x5ACB, 0x0000, 0x0000, 0x18C3,  // 0x09E0 (2528) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x2124, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8430, 0x8C51, 0xAD55, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x09F0 (2544) pixels
  0xD69A, 0x0000, 0x0000, 0xB862, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0A00 (2560) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFBE, 0xF9E7, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0A10 (2576) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x0861, 0x0000, 0x0000,  // 0x0A20 (2592) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x738E, 0x0000, 0x0000, 0x18C3, 0xFFFF, 0xFFFF,  // 0x0A30 (2608) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x39E7, 0x0000, 0x8C51, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3,  // 0x0A40 (2624) pixels
  0x0000, 0x0000, 0x7BCF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDF7, 0x0000, 0x0000, 0x4208, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000,  // 0x0A50 (2640) pixels
  0x4A69, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x0000, 0x0000, 0x2945, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xAD75, 0xFFFF,  // 0x0A60 (2656) pixels
  0xFFFF, 0xFFFF, 0x52AB, 0x0000, 0x0000, 0x18C3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x18E3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0A70 (2672) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD6BA, 0x0000, 0x0000, 0xA061, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0A80 (2688) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xFFFF, 0xFFFF, 0xFFFF, 0xFBAE, 0xF800, 0xF800,  // 0x0A90 (2704) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0AA0 (2720) pixels
  0xF800, 0xF800, 0xF800, 0x0041, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0AB0 (2736) pixels
  0x2945, 0x0000, 0x0000, 0x18C3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x39E7,  // 0x0AC0 (2752) pixels
  0x0000, 0x8C51, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3, 0x0000, 0x0000, 0x7BCF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDF7, 0x0000, 0x0000, 0x4208,  // 0x0AD0 (2768) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x4A69, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0x0000, 0x0000, 0x2944, 0xFFFF, 0xFFFF,  // 0x0AE0 (2784) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xAD75, 0xFFFF, 0xFFFF, 0xFFFF, 0x5ACB, 0x0000, 0x0000, 0x18C3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0AF0 (2800) pixels
  0x0000, 0x18E3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDB, 0x0000, 0x0000, 0x8861,  // 0x0B00 (2816) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0B10 (2832) pixels
  0xFFFF, 0xFD55, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0B20 (2848) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF820, 0x0041, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0B30 (2864) pixels
  0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0020, 0x0000, 0x0000, 0x10A2, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0841, 0x0000,  // 0x0B40 (2880) pixels
  0x0000, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0x4228, 0x0000, 0x8C71, 0xFFFF, 0xFFFF, 0xFFFF, 0xA534, 0x0000, 0x0000, 0x73AE, 0xFFFF,  // 0x0B50 (2896) pixels
  0xFFFF, 0xFFFF, 0xC638, 0x0000, 0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, 0x0000, 0x0000, 0x39E7, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0B60 (2912) pixels
  0xFFDF, 0x0000, 0x0000, 0x18E3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x94B2, 0xFFFF, 0xFFFF, 0xFFFF, 0x630C, 0x0000,  // 0x0B70 (2928) pixels
  0x0000, 0x18C3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x1082, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0B80 (2944) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6861, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0B90 (2960) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF986, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0BA0 (2976) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF841, 0x0000,  // 0x0BB0 (2992) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0020, 0x0000, 0x0000, 0x0841,  // 0x0BC0 (3008) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0x4208, 0x0000, 0x8C51, 0xFFFF, 0xFFFF,  // 0x0BD0 (3024) pixels
  0xFFFF, 0x9CF3, 0x0000, 0x0000, 0x738E, 0xFFFF, 0xFFFF, 0xFFFF, 0xC618, 0x0000, 0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C,  // 0x0BE0 (3040) pixels
  0x0000, 0x0000, 0x39C7, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0000, 0x0000, 0x2104, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,  // 0x0BF0 (3056) pixels
  0x9492, 0xFFFF, 0xFFFF, 0xFFFF, 0x5AEB, 0x0000, 0x0000, 0x2124, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0020, 0xFFFF, 0xFFFF,  // 0x0C00 (3072) pixels
  0xFFFF, 0xF7BE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5841, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0C10 (3088) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0C20 (3104) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0C30 (3120) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xD862, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF,  // 0x0C40 (3136) pixels
  0xFFFF, 0xFFFF, 0x0020, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0861, 0x0000, 0x0000, 0xF7BE, 0xFFFF, 0xFFFF,  // 0x0C50 (3152) pixels
  0xFFFF, 0x3186, 0x0000, 0x9492, 0xFFFF, 0xFFFF, 0xFFFF, 0xA514, 0x0000, 0x0000, 0x73AE, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0x0000,  // 0x0C60 (3168) pixels
  0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x0000, 0x0000, 0x39C7, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0000, 0x0000, 0x18E4,  // 0x0C70 (3184) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x94B2, 0xFFFF, 0xFFFF, 0xFFFF, 0x5AEB, 0x0000, 0x0000, 0x39C7, 0xFFFF, 0xFFFF,  // 0x0C80 (3200) pixels
  0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0x0000, 0x0000, 0x0000, 0xEF7D, 0xE73C, 0xDEDB, 0x94B2, 0x0000,  // 0x0C90 (3216) pixels
  0x0000, 0x2062, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0CA0 (3232) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0CB0 (3248) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xB061, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0CC0 (3264) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x18C3, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0CD0 (3280) pixels
  0x18E3, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x8C51, 0xFFFF, 0xFFFF, 0xFFFF, 0xA514, 0x0000, 0x0000,  // 0x0CE0 (3296) pixels
  0x738E, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDF7, 0x0000, 0x0000, 0x39C7, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x0000, 0x0000, 0x4208, 0xFFFF,  // 0x0CF0 (3312) pixels
  0xFFFF, 0xFFFF, 0xF79E, 0x0000, 0x0000, 0x2104, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xA534, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0D00 (3328) pixels
  0x4A69, 0x0000, 0x0000, 0x73AE, 0xFFFF, 0xFFFF, 0xFFFF, 0xD6BA, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,  // 0x0D10 (3344) pixels
  0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0x0000, 0x0000, 0x0041, 0xF820, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0D20 (3360) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0D30 (3376) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0D40 (3392) pixels
  0x7862, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x18E3, 0x0000,  // 0x0D50 (3408) pixels
  0x0000, 0x0000, 0xC638, 0xFFFF, 0xFFFF, 0xFFFF, 0x6B6D, 0x0000, 0x39C7, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x738E,  // 0x0D60 (3424) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x0000, 0x0000, 0xDEDB, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDD7, 0x0000, 0x0000, 0x39C7, 0xFFFF, 0xFFFF,  // 0x0D70 (3440) pixels
  0xFFFF, 0xE71C, 0x0000, 0x0000, 0x31A6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xA534, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0D80 (3456) pixels
  0x0000, 0x0000, 0xAD55, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDF7, 0x0000, 0x0000, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3, 0x0000, 0x0000,  // 0x0D90 (3472) pixels
  0xB5B6, 0xFFFF, 0xFFFF, 0xFFFF, 0x2945, 0x0000, 0x4228, 0xFFFF, 0xFFFF, 0xFFFF, 0x9492, 0x0000, 0x0000, 0x0000, 0xE061, 0xF800,  // 0x0DA0 (3488) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0DB0 (3504) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0DC0 (3520) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x2861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0DD0 (3536) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x18E3, 0x0000, 0x0000, 0x0000, 0x4228, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0xFFFF, 0xFFFF,  // 0x0DE0 (3552) pixels
  0xFFFF, 0xFFFF, 0x630C, 0x0000, 0x0000, 0x39E7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF,  // 0x0DF0 (3568) pixels
  0xBDD7, 0x0000, 0x0000, 0x39C7, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x0020, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0E00 (3584) pixels
  0xFFDF, 0xFFFF, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xAD55, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0E10 (3600) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0x3186, 0x0000, 0x0000, 0x31A6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD6BA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0E20 (3616) pixels
  0x2124, 0x0000, 0x0000, 0x0000, 0x5882, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0E30 (3632) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0E40 (3648) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xE061, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0E50 (3664) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2104, 0x0000, 0x0000, 0x0000, 0x0000, 0xB5B6,  // 0x0E60 (3680) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,  // 0x0E70 (3696) pixels
  0xFFFF, 0xFFFF, 0x4228, 0xDEDB, 0xFFFF, 0xFFFF, 0xC618, 0x0000, 0x0000, 0x39E7, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x0000, 0x0000,  // 0x0E80 (3712) pixels
  0x0000, 0xC618, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CD3, 0x8430, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xAD75, 0xFFFF,  // 0x0E90 (3728) pixels
  0xFFFF, 0xFFFF, 0x738E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xFFFF, 0xFFFF,  // 0x0EA0 (3744) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA514, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB082, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0EB0 (3760) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0EC0 (3776) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0ED0 (3792) pixels
  0xF820, 0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xDEFB, 0xE71C, 0xE71C, 0xF7BE,  // 0x0EE0 (3808) pixels
  0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6B4D, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0x8410, 0x0000, 0x0000, 0x0000,  // 0x0EF0 (3824) pixels
  0x0000, 0x0000, 0x1082, 0xE73D, 0xFFFF, 0xFFFF, 0xFFDF, 0x4208, 0x0000, 0x73AE, 0xEF5D, 0xEF5D, 0x94B2, 0x0000, 0x0000, 0x2104,  // 0x0F00 (3840) pixels
  0xF79E, 0xDEFB, 0xE73C, 0xBDF7, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDF7, 0xFFFF, 0xFFFF, 0xFFFF, 0x8C51, 0x0000, 0x31A6, 0xEF7D,  // 0x0F10 (3856) pixels
  0xEF5D, 0xEF5D, 0x0000, 0x0000, 0x7BCF, 0xEF7D, 0xE71C, 0xDEDB, 0x0000, 0x4A69, 0xEF7D, 0xFFFF, 0xFFFF, 0xCE59, 0x0000, 0x0000,  // 0x0F20 (3872) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x6B4D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x528A, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0F30 (3888) pixels
  0x0000, 0x0000, 0x6882, 0xF841, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0F40 (3904) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,  // 0x0F50 (3920) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF820, 0xB861, 0x0041, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0F60 (3936) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020,  // 0x0F70 (3952) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0F80 (3968) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0F90 (3984) pixels
  0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0FA0 (4000) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000,  // 0x0FB0 (4016) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1061, 0x4061, 0x6861, 0x8882, 0x9881, 0xA061,  // 0x0FC0 (4032) pixels
  0xB061, 0xC061, 0xD061, 0xE061, 0xE861, 0xE861, 0xE861, 0xE841, 0xF041, 0xF041, 0xF041, 0xF041, 0xE841, 0xE841, 0xE861, 0xE861,  // 0x0FD0 (4048) pixels
  0xE061, 0xD861, 0xC861, 0xB861, 0xA861, 0x9841, 0x9061, 0x7061, 0x5041, 0x2082, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0FE0 (4064) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x0FF0 (4080) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1000 (4096) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1010 (4112) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1020 (4128) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1030 (4144) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1040 (4160) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1050 (4176) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1060 (4192) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1070 (4208) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1080 (4224) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x1090 (4240) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x10A0 (4256) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x10B0 (4272) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // 0x10C0 (4288) pixels
};


void drawLoGo(int x, int y) {
  int counter = 0;
  for (int yy = 0; yy < 32; yy++) {
    for (int xx = 0; xx < 134; xx++) {
      dma_display->drawPixel(xx + x, yy + y, Youtube[counter]);
      counter++;
    }
  }
}



//**********************************************************************************************************************************************************
void setup() {


  Serial.begin(115200);

  Serial.println();
  Serial.println();
  Serial.print("Connecting to WiFi");


  // ENTER YOUR WIFI CREDENTIALS
  WiFi.begin("SSID", "PASS");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  //************************************************************ Started running MDNS so that we don't need
  if (!MDNS.begin("iotdisplay")) {
    Serial.println("Error setting up MDNS responder!");
    while (1) {
      delay(1000);
    }
  }
  Serial.println("mDNS responder started");
  is_connected = 1;
  pinMode(0, INPUT);



  // Configurations for Display
  HUB75_I2S_CFG mxconfig(
    PANEL_RES_X,  // module width
    PANEL_RES_Y,  // module height
    PANEL_CHAIN   // Chain length
  );

  mxconfig.gpio.e = 32;
  mxconfig.clkphase = false;
  mxconfig.driver = HUB75_I2S_CFG::FM6124;

  // Display Setup
  dma_display = new MatrixPanel_I2S_DMA(mxconfig);
  dma_display->begin();
  dma_display->setBrightness8(255);  //0-255
  dma_display->clearScreen();



  // Setting up HTML page for Custom Message Input
  WiFi.mode(WIFI_STA);
  client.setInsecure();


  // Send web page with input fields to client
  server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/html", index_html);
  });

  // Send a GET request to <ESP_IP>/get?input1=<inputMessage>
  server.on("/get", HTTP_GET, [](AsyncWebServerRequest * request) {
    customdata;
    colordata;
    String inputParam;
    String inputParam2;
    instaMessage;
    String inputParam3;


    // GET input1 value on <ESP_IP>/get?input1=<inputMessage>
    if (request->hasParam(PARAM_INPUT_1)) {
      customdata = request->getParam(PARAM_INPUT_1)->value();
      inputParam = PARAM_INPUT_1;

      if (customdata.length() > 0) {
        inputvalue = 1;
        Serial.print("customdata length = ");
        Serial.println(customdata.length());
      }

      Serial.print("customdata = ");
      Serial.println(customdata);
    }

    // GET color value on <ESP_IP>/get?color=<inputMessage>
    if (request->hasParam(PARAM_INPUT_2)) {
      colordata = request->getParam(PARAM_INPUT_2)->value();
      inputParam2 = PARAM_INPUT_2;
      Serial.print("colordata =");
      Serial.println(colordata);
      //************** HEX TO RGB  ***********************************
      String hexstring = colordata;
      int number = (int)strtol(&hexstring[1], NULL, 16);
      r = number >> 16;
      g = number >> 8 & 0xFF;
      b = number & 0xFF;

      Serial.print("red is ");
      Serial.println(r);
      Serial.print("green is ");
      Serial.println(g);
      Serial.print("blue is ");
      Serial.println(b);
    }

    // GET color value on <ESP_IP>/get?insta=<inputMessage3>
    if (request->hasParam(PARAM_INPUT_3)) {
      instaMessage = request->getParam(PARAM_INPUT_3)->value();
      inputParam3 = PARAM_INPUT_3;
      Serial.print("inputMessage3 = ");
      Serial.println(instaMessage.length());
      if (instaMessage.length() == 0) {
        instaMessage = inputMessage3;
        Serial.println("Msg Not updated");
      } else {
        instaconnect = 1;
        // instaMessage = inputMessage3;
        inputMessage3 = instaMessage;
        Serial.println("Msg Updated");
      }
      Serial.print("Insatgram = ");
      Serial.println(instaMessage);
    }
    //**********************************************************************************************
    request->send(200, "text/html", "HTTP GET request sent to your ESP on input field (" + inputParam + ")  with value: " + customdata + "<br> HTTP GET request sent to your ESP on input field (" + inputParam2 + ")  with value: " + colordata + "<br>HTTP GET request sent to your ESP on input field (" + inputParam3 + ")  with value: " + instaMessage + "<br><br><a href=\"/\">Return to Home Page</a>");
  });

  server.onNotFound(notFound);
  server.begin();
}


//******************************************************************** Function For Displaying Instagram Followers and Logo
void Instagram() {
  for (int i = 300; i > 50; i--) {
    drawInsta(i, 0);
    delay(30);
    dma_display->clearScreen();
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(dma_display->color565(148, 0, 211));
    dma_display->print("  -");
    dma_display->print(instaMessage);
    Credential_Reset();// Check whether to erase credentials or not
  }
  dma_display->clearScreen();
  dma_display->setTextSize(4);
  dma_display->setCursor(50, 2);
  dma_display->setTextColor(dma_display->color565(148, 0, 211));
  dma_display->print("  -");
  dma_display->print(instaMessage);

  for (int o = 0; o <= 5000; o++)
    drawInsta(50, 0);


  for (int i = 50; i > -300; i--) {
    drawInsta(i, 0);
    delay(30);
    dma_display->clearScreen();
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(dma_display->color565(148, 0, 211));
    dma_display->print("  -");
    dma_display->print(instaMessage);
    Credential_Reset();// Check whether to erase credentials or not
  }
}

//******************************************************************** Function For Displaying YouTube Subscribers and Logo
void youtube() {
  if (millis() > nextRunTime) {
    if (api.getChannelStatistics(CHANNEL_ID)) {
      Serial.println("---------Stats---------");
      Serial.print("Subscriber Count: ");
      Serial.println(api.channelStats.subscriberCount);
      Serial.print("View Count: ");
      Serial.println(api.channelStats.viewCount);
      Serial.print("Comment Count: ");
      Serial.println(api.channelStats.commentCount);
      Serial.print("Video Count: ");
      Serial.println(api.channelStats.videoCount);
      // Probably not needed :)
      Serial.print("hiddenSubscriberCount: ");
      Serial.println(api.channelStats.hiddenSubscriberCount);
      Serial.println("------------------------");
      Credential_Reset();
    }
    nextRunTime = millis() + timeBetweenRequests;
  }

  //************************** YOUTUBE *************************************
  for (int i = 300; i > 5; i--) {
    drawLoGo(i, 0);
    delay(40);
    dma_display->clearScreen();
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(myWHITE);
    dma_display->print("      -");
    dma_display->print(api.channelStats.subscriberCount);
    Credential_Reset();
  }

  dma_display->clearScreen();
  dma_display->setTextSize(4);
  dma_display->setCursor(5, 2);
  dma_display->setTextColor(myWHITE);
  dma_display->print("      -");
  dma_display->print(api.channelStats.subscriberCount);

  for (int o = 0; o <= 5000; o++)
    drawLoGo(5, 0);

  for (int i = 5; i > -320; i--) {
    drawLoGo(i, 0);
    delay(40);
    dma_display->clearScreen();
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(myWHITE);
    dma_display->print("      -");
    dma_display->print(api.channelStats.subscriberCount);
    Credential_Reset();
  }
}

//******************************************************************** Function For Displaying Custom Message on Board
void Inputtext() {

  int leng = customdata.length();
  Serial.println("Printing Data");
  Serial.println(leng);
  int len = leng * 25;
  Serial.println(len);
  for (int i = 300; i > -len; i--) {
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(dma_display->color565(r, g, b));
    dma_display->print(customdata);
    delay(30);
    dma_display->clearScreen();
    Credential_Reset();
  }
}


//******************************************************************** Function For Displaying Date, Time & Day

void Data()
{

  // Connect to HTTP server
  WiFiClient client;
  client.setTimeout(10000);
  if (!client.connect(Hostname, port)) {
    Serial.println(F("Connection failed"));
    return;
  }

  // Send HTTP request
  client.println("GET " + URI + " HTTP/1.0");
  client.println("Host: " + (String)Hostname);
  client.println("Connection: close");
  if (client.println() == 0) {
    Serial.println("Failed to send request");
    client.stop();
    return;
  }

  // Check HTTP status
  char status[32] = { 0 };
  client.readBytesUntil('\r', status, sizeof(status));
  if (strcmp(status, "HTTP/1.0 200 OK") != 0) {
    Serial.print(F("Unexpected response: "));
    Serial.println(status);
    client.stop();
    return;
  }

  // Skip HTTP headers
  char endOfHeaders[] = "\r\n\r\n";
  if (!client.find(endOfHeaders)) {
    Serial.println(F("Invalid response"));
    client.stop();
    return;
  }

  // Allocate the JSON document
  StaticJsonDocument<768> doc;

  // Parse JSON object
  DeserializationError error = deserializeJson(doc, client);
  if (error) {
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());
    client.stop();
    return;
  }

  String datetime = doc["datetime"];  // 2022-02-11T15:21:21.732473+05:30

  int Day = doc["day_of_week"];

  Serial.println(datetime);
  Serial.println(Day);

  // Disconnect
  client.stop();
  /***************************************************************************
                FOR TIME
  ***************************************************************************/

  Time = datetime.substring(11, 16);
  Serial.print("mytime - ");
  Serial.println(Time);
  String Hour = datetime.substring(11, 13);

  // 24 hour to 12 hour conversion
  int h = Hour.toInt();
  if (h > 12)
    h = h - 12;
  else
    h = h;
  if (h > 12)
    ampm = 1;
  Serial.println(datetime);
  Hour = (String)h;
  Time = Time.substring(2);
  if (h >= 10)
    Time = Hour + Time;
  else
    Time = "0" + Hour + Time;

  Serial.print("time - ");
  Serial.println(Time);


  //********************** TIME **************************************

  for (int i = 300; i > 50; i--) {
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(myTECHIESMS);
    dma_display->print(Time);
    if (ampm = 1) {
      dma_display->print(" PM");
    } else {
      dma_display->print(" AM");
    }
    delay(5);
    dma_display->clearScreen();
    Credential_Reset();
  }

  dma_display->clearScreen();
  dma_display->setTextSize(4);
  dma_display->setCursor(50, 2);
  dma_display->setTextColor(myTECHIESMS);
  dma_display->print(Time);
  if (ampm = 1) {
    dma_display->print(" PM");
  } else {
    dma_display->print(" AM");
  }
  delay(5000);
  Credential_Reset();
  for (int i = 50; i > -200; i--) {
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(myTECHIESMS);
    dma_display->print(Time);
    if (ampm = 1) {
      dma_display->print(" PM");
    } else {
      dma_display->print(" AM");
    }
    delay(5);
    dma_display->clearScreen();
    Credential_Reset();
  }


  /***************************************************************************
              FOR DAY
   ***************************************************************************/

  String day = day_of_week;

  if (Day == 0)
    Day_str = "Sun";
  if (Day == 1)
    Day_str = "Mon";
  if (Day == 2)
    Day_str = "Tue";
  if (Day == 3)
    Day_str = "Wed";
  if (Day == 4)
    Day_str = "Thurs";
  if (Day == 5)
    Day_str = "Fri";
  if (Day == 6)
    Day_str = "Sat";


  Date = datetime.substring(4, 7);
  DATE = datetime.substring(8, 10);
  Serial.print("day - ");
  Serial.println(Day_str);
  Date = DATE + Date;
  Date = Date + " " + Day_str;
  Serial.print("date - ");
  Serial.println(Date);

  //************************ DATE ********************************************

  for (int i = 300; i > 50; i--) {
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(myTECHIESMS);
    dma_display->print(Date);
    delay(10);
    dma_display->clearScreen();
    Credential_Reset();
  }

  dma_display->clearScreen();
  dma_display->setTextSize(4);
  dma_display->setCursor(50, 2);
  dma_display->setTextColor(myTECHIESMS);
  dma_display->print(Date);
  delay(5000);
  Credential_Reset();


  for (int i = 50; i > -300; i--) {
    dma_display->setTextSize(4);
    dma_display->setCursor(i, 2);
    dma_display->setTextColor(myTECHIESMS);
    dma_display->print(Date);
    delay(10);
    dma_display->clearScreen();
    Credential_Reset();
  }
}

void loop() {

  //************************ If No Credentials are Provided ********************************************

  if (is_connected == 0) {
    //   DO NOTHING....
    dma_display->clearScreen();
    dma_display->setTextSize(4);
    dma_display->setCursor(0, 2);
    dma_display->setTextColor(myTECHIESMS);
    dma_display->print("Wifi ??");
    Credential_Reset() ;
  }
  //************************ After Successfully connecting to WiFi ********************************************

  if (is_connected == 1) {

    Data(); // Function to display Date, Time & Day

    if (instaconnect == 1)
      Instagram(); // Function to Display Instagram Followers

    youtube(); // Function to Display YouTube Subscribers

    if (inputvalue == 1)
      Inputtext(); // Function to Display Custom Message
  }
}

//******************************************************************** Function For Erasing Credentials and Resetting Board
void Credential_Reset() {
  if (digitalRead(0) == LOW) {
    Serial.println("Reset Button Pressed");
    delay(5000);
    if (digitalRead(0) == LOW) {
      wifi_prov_mgr_reset_provisioning();

      Serial.println("Resetting");
      ESP.restart();
    }
  }
}
